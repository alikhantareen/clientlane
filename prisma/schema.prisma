// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
  directUrl = env("DATABASE_URL")
}

enum UserRole {
  freelancer
  client
}

enum PortalStatus {
  active
  pending
  archived
}

enum ActivityType {
  upload
  comment
  status_change
  update_created
  reply_created
  file_uploaded
  file_deleted
  update_deleted
  reply_deleted
  portal_created
  portal_updated
  shared_link_created
}

enum NotificationType {
  new_comment
  file_uploaded
  portal_updated
  new_update
  deadline_reminder
}

enum BillingCycle {
  monthly
  yearly
}

model User {
  id              String          @id @default(uuid())
  name            String
  email           String          @unique
  password_hash   String?
  role            UserRole
  email_verified  Boolean         @default(false) // Whether email is verified
  is_active       Boolean         @default(true)  // Whether user is active or inactive
  image           String?         // Profile image URL
  last_seen_at    DateTime?       // Last activity timestamp
  invited_by_id   String?         // ID of the user who invited this user
  created_at      DateTime        @default(now())
  // Relations
  created_portals Portal[]        @relation("FreelancerPortals")
  client_portals  Portal[]        @relation("ClientPortals")
  comments        Comment[]
  activities      Activity[]
  notifications   Notification[]
  subscriptions   Subscription[]
  files           File[]
  updates         Update[]
  // Self-referential relation for invitations
  invited_by      User?           @relation("UserInvitations", fields: [invited_by_id], references: [id])
  invited_users   User[]          @relation("UserInvitations")
}

model Portal {
  id            String          @id @default(uuid())
  name          String
  description   String
  status        PortalStatus
  thumbnail_url String
  created_by    String
  client_id     String
  created_at    DateTime        @default(now())
  updated_at    DateTime        @default(now())
  tags          String?
  dueDate       String?
  welcomeNote   String?
  // Relations
  freelancer    User            @relation("FreelancerPortals", fields: [created_by], references: [id])
  client        User            @relation("ClientPortals", fields: [client_id], references: [id])
  shared_links  SharedLink[]
  comments      Comment[]
  activities    Activity[]
  files         File[]
  notifications Notification[]
  portal_tags   PortalTag[]
  updates       Update[]
}

model SharedLink {
  id             String    @id @default(uuid())
  portal_id      String
  token          String
  is_revoked     Boolean
  expires_at     DateTime
  last_viewed_at DateTime
  created_at     DateTime  @default(now())
  // Relations
  portal         Portal    @relation(fields: [portal_id], references: [id])
}

model Comment {
  id         String    @id @default(uuid())
  portal_id  String
  user_id    String
  content    String
  created_at DateTime  @default(now())
  // Relations
  portal     Portal    @relation(fields: [portal_id], references: [id])
  user       User      @relation(fields: [user_id], references: [id])
}

model Activity {
  id         String        @id @default(uuid())
  portal_id  String
  user_id    String
  type       ActivityType
  meta       Json
  created_at DateTime      @default(now())
  // Relations
  portal     Portal        @relation(fields: [portal_id], references: [id])
  user       User          @relation(fields: [user_id], references: [id])
}

model Tag {
  id          String      @id @default(uuid())
  name        String
  portal_tags PortalTag[]
}

model PortalTag {
  portal_id String
  tag_id    String
  // Relations
  portal    Portal   @relation(fields: [portal_id], references: [id])
  tag       Tag      @relation(fields: [tag_id], references: [id])
  @@id([portal_id, tag_id])
}

model Notification {
  id         String            @id @default(uuid())
  user_id    String
  portal_id  String
  type       NotificationType
  message    String
  link       String            // URL to navigate to when notification is clicked
  is_read    Boolean
  created_at DateTime          @default(now())
  // Relations
  user       User              @relation(fields: [user_id], references: [id])
  portal     Portal            @relation(fields: [portal_id], references: [id])
}

model Plan {
  id            String        @id @default(uuid())
  name          String
  price         Decimal
  currency      String        @default("USD")
  billing_cycle BillingCycle
  is_active     Boolean       @default(true)
  created_at    DateTime      @default(now())
  subscriptions Subscription[]
}

model Subscription {
  id         String    @id @default(uuid())
  user_id    String
  plan_id    String
  starts_at  DateTime  @default(now())
  ends_at    DateTime
  is_active  Boolean   @default(true)
  canceled_at DateTime?
  // Relations
  user      User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  plan      Plan       @relation(fields: [plan_id], references: [id])
}

model Update {
  id               String    @id @default(uuid())
  title            String
  content          String    // HTML content from rich text editor
  portal_id        String
  user_id          String
  parent_update_id String?   // For threaded replies - null for root updates
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  // Relations
  portal           Portal    @relation(fields: [portal_id], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  files            File[]    @relation("UpdateFiles")
  parent_update    Update?   @relation("UpdateReplies", fields: [parent_update_id], references: [id], onDelete: Cascade)
  replies          Update[]  @relation("UpdateReplies")
}

model File {
  id         String    @id @default(uuid())
  portal_id  String
  user_id    String?
  update_id  String?   // Optional - for files attached to updates
  file_name  String
  file_url   String
  file_type  String
  file_size  Int
  uploaded_at DateTime @default(now())
  // Relations
  portal     Portal    @relation(fields: [portal_id], references: [id], onDelete: Cascade)
  user       User?     @relation(fields: [user_id], references: [id], onDelete: SetNull)
  update     Update?   @relation("UpdateFiles", fields: [update_id], references: [id], onDelete: SetNull)
}

model OTP {
  id         String   @id @default(uuid())
  email      String
  code       String
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  @@unique([email])
}
