// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and user management
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String?  @unique
  firstName   String?
  lastName    String?
  password    String   // Store hashed password
  avatar      String?  // URL to user avatar image
  isActive    Boolean  @default(true)
  isVerified  Boolean  @default(false)
  role        UserRole @default(USER)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime?
  
  // Email verification
  emailVerificationToken String?
  emailVerificationExpires DateTime?
  
  // Password reset
  passwordResetToken String?
  passwordResetExpires DateTime?
  
  // Relations (add more as needed)
  // sessions    Session[]
  // posts       Post[]
  
  @@map("users")
}

// Enum for user roles
enum UserRole {
  USER
  ADMIN
  MODERATOR
}

// Optional: Session model for authentication
// Uncomment and modify as needed for your auth strategy
/*
model Session {
  id        String   @id @default(cuid())
  sessionToken String @unique
  userId    String
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("sessions")
}
*/
